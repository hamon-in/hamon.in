/* ============= */
/* = Variables = */
/* ============= */



// Type

@prose-stack:                   GT Pressura Mono, serif;
@prose-webfont-stack:           gt-pressura-mono, @prose-stack;
@prose-leading:                 1.5;

@title-stack:                   GT Pressura Mono, sans-serif;
@title-webfont-stack:           gt-pressura-mono, @title-stack;
@title-leading:                 1;

@code-stack:                    GT Pressura Mono, monospace;
@code-webfont-stack:            gt-pressura-mono, @code-stack;


// Colours

// Default
@brand-one:     white;
@brand-two:     #121212;
@brand-three:   #825C4E;
@brand-four:    red;
@brand-five:    #D7D7D7;

@brand-five-light: lighten(@brand-five, 10%);



// Layout breakpoints

@xxs-min:   0em;
@xs-min:    25em;     /* 400px */
@sm-min:    47em;     /* 752px */
@md-min:    70em;     /* 1120px */
@lg-min:    85em;     /* 1360px */
@xl-min:    100em;    /* 1600px */
@xxl-min:   120em;    /* 1920px */

@xxs-max:   (@xs-min - 0.01em);
@xs-max:    (@sm-min - 0.01em);
@sm-max:    (@md-min - 0.01em);
@md-max:    (@lg-min - 0.01em);
@lg-max:    (@xl-min - 0.01em);
@xl-max:    (@xxl-min - 0.01em);

@breakpoint_suffixes:  ~'-xs', ~'-sm', ~'-md', ~'-lg', ~'-xl';
@breakpoint_widths: @xs-min, @sm-min, @md-min, @lg-min, @xl-min;



// Function to recursively declare a set of rules
// at every breakpoint, starting with the default
// (no media query) breakpoint
.recurse-breakpoints(@ruleset) {
    .declare-breakpoint(@ruleset);
    .declare-breakpoint(@ruleset, @xs-min, ~'-xs');
    .declare-breakpoint(@ruleset, @sm-min, ~'-sm');
    .declare-breakpoint(@ruleset, @md-min, ~'-md');
    .declare-breakpoint(@ruleset, @lg-min, ~'-lg');
    .declare-breakpoint(@ruleset, @xl-min, ~'-xl');
}
.declare-breakpoint(@ruleset, @suffix: ~'') {
    @ruleset();
}
.declare-breakpoint(@ruleset, @min-width, @suffix) {
    @media (min-width: @min-width) {
        @ruleset();
    }
}



// Recursilvely declare a rule set for an array of
// values <=> (min-width) breakpoints
// eg: ( { padding: @value }, (1rem, 2rem), (@xs-min, @md-min) )
.recurse-rule-breakpoints(@ruleset, @values, @breakpoints) {
    .recurse-rule-breakpoints-loop(@ruleset, @values, @breakpoints, length(@breakpoints));
    
    .recurse-rule-breakpoints-loop(@ruleset, @values, @breakpoints, @index) when (@index > 0) {
        .recurse-rule-breakpoints-loop(@ruleset, @values, @breakpoints, @index - 1);
        @value: extract(@values, @index);
        @breakpoint: extract(@breakpoints, @index);
        .declare-rule-breakpoint(@ruleset, @value, @breakpoint);
    }
    .declare-rule-breakpoint(@ruleset, @value, @breakpoint) when (@breakpoint = '') {
        @ruleset();
    }
    .declare-rule-breakpoint(@ruleset, @value, @breakpoint) when (default()) {
        @media (min-width: @breakpoint) {
            @ruleset();
        }
    }
}


// Responsive helpers
.xs-plus(@rules) { @media (min-width: @xs-min) { @rules(); } }
.sm-plus(@rules) { @media (min-width: @sm-min) { @rules(); } }
.md-plus(@rules) { @media (min-width: @md-min) { @rules(); } }


// Font serving on Retina devices
.retina-font-weight(@font-weight; @important:~'') {
    @media (-webkit-min-device-pixel-ratio: 1.5),
           (min--moz-device-pixel-ratio: 1.5),
           (min-resolution: 1.5dppx),
           (min-resolution: 144dpi)
    {
        & { font-weight: @font-weight @important; }
    }
}



